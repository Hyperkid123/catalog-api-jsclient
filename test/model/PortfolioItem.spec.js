/**
 * Catalog API
 * This is a API to fetch and order catalog items from different cloud sources
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CatalogApi);
  }
}(this, function(expect, CatalogApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CatalogApi.PortfolioItem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PortfolioItem', function() {
    it('should create an instance of PortfolioItem', function() {
      // uncomment below and update the code to test PortfolioItem
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be.a(CatalogApi.PortfolioItem);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property favorite (base name: "favorite")', function() {
      // uncomment below and update the code to test the property favorite
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property orphan (base name: "orphan")', function() {
      // uncomment below and update the code to test the property orphan
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "display_name")', function() {
      // uncomment below and update the code to test the property displayName
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property longDescription (base name: "long_description")', function() {
      // uncomment below and update the code to test the property longDescription
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property distributor (base name: "distributor")', function() {
      // uncomment below and update the code to test the property distributor
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property documentationUrl (base name: "documentation_url")', function() {
      // uncomment below and update the code to test the property documentationUrl
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property supportUrl (base name: "support_url")', function() {
      // uncomment below and update the code to test the property supportUrl
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property workflowRef (base name: "workflow_ref")', function() {
      // uncomment below and update the code to test the property workflowRef
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instane = new CatalogApi.PortfolioItem();
      //expect(instance).to.be();
    });

  });

}));
